from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from aiogram.dispatcher.filters.state import StatesGroup, State
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv
import os

load_dotenv()
# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
engine = create_engine('sqlite:///schedule.db', echo=True)
Session = sessionmaker(bind=engine)
session = Session()

# –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å
Base = declarative_base()



class MyForm(StatesGroup):
    waiting_for_day = State()
    waiting_for_schedule = State()
    waiting_for_day_update = State()
    waiting_for_schedule_update = State()
    waiting_for_day_delete = State()

class Schedule(Base):
    __tablename__ = 'schedule'

    id = Column(Integer, primary_key=True)
    day = Column(String)
    timetable = Column(String)


# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
Base.metadata.create_all(engine)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply(f"<em>–ü—Ä–∏–≤–µ—Ç, </em> <b>{message.from_user.first_name}</b>üëã<em>! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /schedule, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.</em>",
                        parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule
@dp.message_handler(commands=['schedule'])
async def schedule(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton(text="–ü–Ω.", callback_data="day_monday"),
        types.InlineKeyboardButton(text="–í—Ç.", callback_data="day_tuesday"),
        types.InlineKeyboardButton(text="–°—Ä.", callback_data="day_wednesday"),
        types.InlineKeyboardButton(text="–ß—Ç.", callback_data="day_thursday"),
        types.InlineKeyboardButton(text="–ü—Ç.", callback_data="day_friday"),
        types.InlineKeyboardButton(text="–°–±.", callback_data="day_saturday"),
    )
    await message.reply("<em>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:</em>",
                        parse_mode='HTML', reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Inline-–∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('day_'))
async def process_inline_button(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ callback_data –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–≥–æ
    day = callback_query.data.split('_')[1]
    schedule = get_schedule_from_database(day)
    await bot.send_message(callback_query.message.chat.id, f'{day}:' + f'\n{schedule}')
    await callback_query.answer()

# callback_query.from_user.id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@dp.message_handler(commands=['admin'])
async def admin(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(message.from_user.id):
        await message.answer(text='<em>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ê–¥–º–∏–Ω–∫–µüö´</em>!',
                             parse_mode='HTML')
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_add_schedule"),
        types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_update_schedule"),
        types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_delete_schedule"),
    )
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


kb = [
        [
            types.KeyboardButton(text="monday"),
            types.KeyboardButton(text="tuesday"),
            types.KeyboardButton(text="wednesday"),
            types.KeyboardButton(text="thursday"),
            types.KeyboardButton(text="friday"),
            types.KeyboardButton(text="saturday")
        ],
    ]
keyboard = types.ReplyKeyboardMarkup(
    keyboard=kb,
    resize_keyboard=True,
    )

keyboard_rem = types.ReplyKeyboardRemove(True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Inline-–∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
@dp.callback_query_handler(lambda callback_data: callback_data.data and callback_data.data.startswith('admin_'))
async def process_admin_button(callback_query: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(callback_query.from_user.id):
        return
    
    action = callback_query.data.split('_')[1]
    await callback_query.answer()

    
    
    if action == "add":
        await bot.send_message(callback_query.from_user.id, "<em>üìÜ–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:</em>", parse_mode='HTML', reply_markup=keyboard)
        # –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        await MyForm.waiting_for_day.set()
    elif action == "update":
        await bot.send_message(callback_query.from_user.id, "<em>üìÜ–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</em>", parse_mode='HTML', reply_markup=keyboard)
        # –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        await MyForm.waiting_for_day_update.set()
    elif action == "delete":
        await bot.send_message(callback_query.from_user.id, "<em>üìÜ–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</em>", parse_mode='HTML', reply_markup=keyboard)
        # –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        await MyForm.waiting_for_day_delete.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(state=MyForm.waiting_for_day)
async def process_day_for_add_schedule(message: types.Message, state: FSMContext):
    day = message.text
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.update_data(day=day)
    await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=keyboard_rem)
    # –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    await MyForm.waiting_for_schedule.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(state=MyForm.waiting_for_schedule)
async def process_schedule_for_add_schedule(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    data = await state.get_data()
    day = data['day']
    timetable = message.text
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    new_schedule = Schedule(day=day, timetable=timetable)
    session.add(new_schedule)
    session.commit()
    
    await state.finish()
    await bot.send_message(message.from_user.id, "<em>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æüëå</em>!",
                           parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(state=MyForm.waiting_for_day_update)
async def process_day_for_update_schedule(message: types.Message, state: FSMContext):
    day = message.text
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.update_data(day=day)
    await bot.send_message(message.from_user.id, "<em>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</em>",
                           parse_mode='HTML', reply_markup=keyboard_rem)
    # –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    await MyForm.waiting_for_schedule_update.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(state=MyForm.waiting_for_schedule_update)
async def process_schedule_for_update_schedule(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    data = await state.get_data()
    day = data['day']
    timetable = message.text
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    schedule = session.query(Schedule).filter_by(day=day).first()
    if schedule:
        schedule.timetable = timetable
        session.commit()
        await state.finish()
        await bot.send_message(message.from_user.id, "<em>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æüëå!</em>",
                               parse_mode='HTML')
    else:
        await state.finish()
        await bot.send_message(message.from_user.id, "<em>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æü§∑‚Äç‚ôÇÔ∏è.</em>",
                               parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(state=MyForm.waiting_for_day_delete)
async def process_day_for_delete_schedule(message: types.Message, state: FSMContext):
    day = message.text
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    schedule = session.query(Schedule).filter_by(day=day).first()
    if schedule:
        session.delete(schedule)
        session.commit()
        await state.finish()
        await bot.send_message(message.from_user.id, "<em>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æüëå!</em>",
                               parse_mode='HTML')
    else:
        await state.finish()
        await bot.send_message(message.from_user.id, "<em>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æü§∑‚Äç‚ôÇÔ∏è.</em>",
                               parse_mode='HTML')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –ø–æ–º–æ—â—å—é —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admins = [699536364, 5232384737, 5727807505]  # –ü—Ä–∏–º–µ—Ä —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    return user_id in admins


def get_schedule_from_database(day):
    schedule = session.query(Schedule).filter_by(day=day).first()
    if schedule:
        return schedule.timetable
    else:
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æü§∑‚Äç‚ôÇÔ∏è."


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)